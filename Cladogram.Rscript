#! /usr/bin/Rscript-4.1
args <- commandArgs(TRUE)

WORK <- args[1]
Phenotype <- args[2]


library("wesanderson")
library(dplyr)
library(phyloseq)
library(bigreadr)
library(ggtreeExtra)
library(ggtree)
library(tidytree)
library(ggplot2)
library(ggnewscale)
library(httpgd)
library(Polychrome)
library(RColorBrewer)
library(ape)
library("tidyverse")

# hgd()
setwd(WORK)

nodeid.tbl_tree <- utils::getFromNamespace("nodeid.tbl_tree", "tidytree")
rootnode.tbl_tree <- utils::getFromNamespace("rootnode.tbl_tree", "tidytree")
offspring.tbl_tree <- utils::getFromNamespace("offspring.tbl_tree", "tidytree")
offspring.tbl_tree_item <- utils::getFromNamespace(".offspring.tbl_tree_item", "tidytree")
child.tbl_tree <- utils::getFromNamespace("child.tbl_tree", "tidytree")
parent.tbl_tree <- utils::getFromNamespace("parent.tbl_tree", "tidytree")
##
# ASV table
ASV <- read.table(file = "feature-table.tsv", sep = "\t", header = T, row.names = 1, 
                  skip = 1, comment.char = "")
# Taxonomy information
taxonomy <- read.table(file = "taxonomy.tsv", sep = "\t", header = T ,row.names = 1)
tax <- taxonomy %>%
  select(Taxon) %>% tidyr::separate(Taxon, c("Kingdom","Phylum","Class","Order","Family","Genus","Species"), 
                                  sep = "; ", remove=F, extra = "merge", fill="warn")

tax[which(is.na(tax$Phylum)),3] <- "u__"
tax[which(is.na(tax$Class)),4] <- "u__"
tax[which(is.na(tax$Order)),5] <- "u__"
tax[which(is.na(tax$Family)),6] <- "u__"
tax[which(is.na(tax$Genus)),7] <- "u__"
tax[which(is.na(tax$Species)),8] <- "u__"
tax$Taxon <- paste(tax$Kingdom,tax$Phylum,tax$Class,tax$Order,tax$Family,tax$Genus,sep=";")
tax <- subset(tax, select=-Species)

temp_tax <- tax %>% as.data.frame() %>% subset(.,select=-Taxon)
tax <- temp_tax %>% as.data.frame() %>% subset(.,select=-c(Taxon,Kingdom))

tax$Phylum <- paste(temp_tax$Kingdom,temp_tax$Phylum,sep=";")
tax$Class <- paste(temp_tax$Kingdom,temp_tax$Phylum,temp_tax$Class,sep=";")
tax$Order <- paste(temp_tax$Kingdom,temp_tax$Phylum,temp_tax$Class,temp_tax$Order,sep=";")
tax$Family <- paste(temp_tax$Kingdom,temp_tax$Phylum,temp_tax$Class,temp_tax$Order,temp_tax$Family,sep=";")
tax$Genus <- paste(temp_tax$Kingdom,temp_tax$Phylum,temp_tax$Class,temp_tax$Order,temp_tax$Family,temp_tax$Genus,sep=";")

# Clinic data
metadata <- read.table(file = "Case_control_clinic_total.txt", sep = "\t", header = T, row.names = 1)

OTU = otu_table(as.matrix(ASV), taxa_are_rows = TRUE)
TAX = tax_table(as.matrix(tax))
SAMPLE <- sample_data(metadata)

# Tree data
TREE = read_tree("tree.nwk")

ps <- phyloseq(OTU, TAX, SAMPLE,TREE)

ps.taxa <- tax_glom(ps, taxrank = 'Genus', NArm = FALSE)

tax <- tax_table(ps.taxa) %>% as.data.frame() 
tax$id <- rownames(tax)
tax <-  tax[,c("id","Genus")]

# Tested taxa
taxa_metadata <- fread2("IBD_CMD_taxa_metadata_IBD_tested.txt")
taxa_metadata <- taxa_metadata %>% filter(level == "Genus")

# taxa_metadata$name %>% unique()
# tax$Genus %>% unique()

G_taxa <- inner_join(tax,taxa_metadata,by=c("Genus"="name"))
G_taxa$Taxon <- G_taxa$Genus
G_taxa <- G_taxa %>% tidyr::separate(Genus, c("Kingdom","Phylum","Class","Order","Family","Genus"), 
                                  sep = ";", remove=F, extra = "merge", fill="warn")

for (i in 1:nrow(G_taxa)){
  if (G_taxa[i,3] == "p__"){
    kingdom <- paste0("Unclassified_", G_taxa[i,2])
    G_taxa[i, 3:7] <- kingdom
  } else if (G_taxa[i,4] == "c__"){
    phylum <- paste0("Unclassified_", G_taxa[i,3])
    G_taxa[i, 4:7] <- phylum
  } else if (G_taxa[i,5] == "o__"){
    class <- paste0("Unclassified_", G_taxa[i,4])
    G_taxa[i, 5:7] <- class
  } else if (G_taxa[i,6] == "f__"){
    family <- paste0("Unclassified_", G_taxa[i,5])
    G_taxa[i, 6:7] <- family
  } else if (G_taxa[i,7] == "g__"){
    genus <- paste0("Unclassified_", G_taxa[i,6])
    G_taxa[i, 7] <- genus
  }
}
for (i in 1:nrow(G_taxa)){
  if (G_taxa[i,3] == "u__"){
    kingdom <- paste0("Unclassified_", G_taxa[i,2], "[2]")
    G_taxa[i, 3:7] <- kingdom
  } else if (G_taxa[i,4] == "u__"){
    phylum <- paste0("Unclassified_", G_taxa[i,3], "[2]")
    G_taxa[i, 4:7] <- phylum
  } else if (G_taxa[i,5] == "u__"){
    class <- paste0("Unclassified_", G_taxa[i,4], "[2]")
    G_taxa[i, 5:7] <- class
  } else if (G_taxa[i,6] == "u__"){
    family <- paste0("Unclassified_", G_taxa[i,5], "[2]")
    G_taxa[i, 6:7] <- family
  } else if (G_taxa[i,7] == "u__"){
    genus <- paste0("Unclassified_", G_taxa[i,6], "[2]")
    G_taxa[i, 7] <- genus
  }
}

OTU = otu_table(as.matrix(ASV), taxa_are_rows = TRUE)
rownames(G_taxa) <- G_taxa$id

TAX = tax_table(as.matrix(G_taxa[,c("Genus","Phylum")]))
SAMPLE <- sample_data(metadata)

new_ps <- phyloseq(OTU, TAX, SAMPLE,TREE)

taxa_metadata <- taxa_metadata %>% mutate(G_SIG = case_when(OR_padj < 0.05 & ibd_padj < 0.05 ~ 3, 
                                                            ibd_padj < 0.05 & OR_padj >= 0.05 ~ 1,
                                                            ibd_padj >= 0.05 & OR_padj < 0.05 ~ 2,
                                                            ibd_padj >= 0.05 & OR_padj >= 0.05 ~ 0))
taxa_metadata$G_SIG <- as.factor(taxa_metadata$G_SIG)
rownames(taxa_metadata) <- taxa_metadata$id

taxa_metadata[taxa_metadata$IBD_fc > 3, "IBD_fc"] = 3
taxa_metadata[taxa_metadata$IBD_fc <= -3, "IBD_fc"] = -3
taxa_metadata[taxa_metadata$OR_fc > 3, "OR_fc"] = 3
taxa_metadata[taxa_metadata$OR_fc <= -3, "OR_fc"] = -3

# taxa_metadata$Genus <- gsub("Unclassified_","U.C_",taxa_metadata$Genus)
taxa_metadata$Genus <- gsub("Unclassified_","Unc_",taxa_metadata$Genus)

df1 <- taxa_metadata[,c("G_SIG")] %>% as.data.frame()
rownames(df1) <- rownames(taxa_metadata)
colnames(df1) <- "G_SIG"
taxa_metadata[which(taxa_metadata$G_SIG == 0),c("IBD_fc","OR_fc")]  <- 0

df_ph <- taxa_metadata[,c("Phylum")] %>% as.data.frame()
rownames(df_ph) <- rownames(taxa_metadata)
colnames(df_ph) <- "Phylum"

lfc_genera_IBD <- taxa_metadata[,c("IBD_fc")] %>% as.data.frame()
rownames(lfc_genera_IBD) <- rownames(taxa_metadata)
colnames(lfc_genera_IBD) <- "G_IBD_fc"

lfc_genera_OR <- taxa_metadata[,c("OR_fc")] %>% as.data.frame()
rownames(lfc_genera_OR) <- rownames(taxa_metadata)
colnames(lfc_genera_OR) <- "G_OR_fc"

color_pa <- c("#ff5410","#09008b","#0e967f","#F900BF","#5f0000","#0077ff","#1a5a14")

tree <- phy_tree(new_ps)
base_tree <- ggtree(tree, layout="fan", open.angle=30)
p <- base_tree %<+% taxa_metadata + geom_tiplab(aes(label=""),align = T,size = 8, offset = .4)
p <- p + new_scale_fill()

p2 <- p + geom_tiplab2(aes(color = Phylum,label=Genus),align = T,size = 11, offset = .46,linetype = "blank") +  scale_colour_manual(values=color_pa)
p2 <- p2 + new_scale_fill()

p3 <- gheatmap(p2, df_ph, width = .1,font.size = 1,colnames_offset_y = -1,color = "white",offset = -0.04) + scale_fill_manual(values = color_pa)
p3 <- p3 + new_scale_fill()

p4 <- gheatmap(p3, df1, width = .1,font.size = 2,colnames_offset_y = -1,color = "black",offset = .06) + 
      scale_fill_manual(breaks=c("0", "1", "2", "3"), 
        values=c("#ffffff",wes_palette("FantasticFox1")[3],wes_palette("FantasticFox1")[4],wes_palette("FantasticFox1")[5]), name="Disease-specific genera")
p4 <- p4 + new_scale_fill()

p5 <- gheatmap(p4, lfc_genera_IBD, width = .12,font.size = 3, offset=.16,colnames_offset_y = -1,color = "black") + 
      scale_fill_gradient2(
    low = "#000874", 
    mid = "white", 
    high = "#ff0000", 
    midpoint = 0, limits = c(-3,3), name = "Microbial alteration in IBD or CMD patients\n(genus level)", breaks = c(-3,-1.5,0,1.5,3)
    )
p6 <- gheatmap(p5, lfc_genera_OR, width = .12,font.size = 3, offset=.28,colnames_offset_y = -1,color = "black") + 
      scale_fill_gradient2(
    low = "#000874", 
    mid = "white", 
    high = "#ff0000", 
    midpoint = 0, limits = c(-3,3), name = "Microbial alteration in IBD or CMD patients\n(genus level)", breaks = c(-3,-1.5,0,1.5,3)
    )

p7 <- p6 + theme_void()+theme(legend.position = "none")

# Plots
ggsave("Fan_cladogram_no_colnames_w_legend_v_revision2.png",plot = p6, dpi=500, dev='png', units = c("in"), height = 20, width = 30)
ggsave("Fan_cladogram_no_colnames_wo_legend_v_revision2.png",plot = p7, dpi=300, dev='png', units = c("in"), height = 38, width = 40)

