#! /usr/bin/Rscript-4.1
args <- commandArgs(TRUE)

WORK <- args[1]
Phenotype <- args[2]

library(bigreadr)
library("dplyr")
library("vegan")
library("ggfortify")
library("ggplot2")
library("ggrepel")
library("gridExtra")
library("wesanderson")
names(wes_palettes)

setwd(WORK)
print(paste0("Working DIR: ",WORK))
print(paste0("IBD status: ",Phenotype))

####data
taxa_ibd =c()
taxa_OR=c()

levels = c("Kingdom","Phylum","Class","Order","Family","Genus")
if (Phenotype == "IBD") {
for(i in 2:6){
  temp=read.table(paste("level-",i,"_vsControl_allP_IBD_507.csv",sep=""),header = T, sep=",")
  temp$level = levels[i]
  # temp <-temp %>% filter(is.na(padj) == FALSE)
  taxa_ibd = rbind(taxa_ibd,temp)
  temp_m=read.table(paste("level-",i,"_vsMF_IBD_allP_OR.csv",sep=""),header = T, sep=",")
  temp_m$level = levels[i]
  taxa_OR = rbind(taxa_OR,temp_m)
}
} else if (Phenotype == "UC") {
for(i in 2:6){
  temp=read.table(paste("level-",i,"_vsControl_allP_UC.csv",sep=""),header = T, sep=",")
  temp$level = levels[i]
  # temp <-temp %>% filter(is.na(padj) == FALSE)
  taxa_ibd = rbind(taxa_ibd,temp)
  temp_m=read.table(paste("level-",i,"_vsMF_UC_allP_OR.csv",sep=""),header = T, sep=",")
  temp_m$level = levels[i]
  taxa_OR = rbind(taxa_OR,temp_m)
}
} else if (Phenotype == "CD") {
for(i in 2:6){
  temp=read.table(paste("level-",i,"_vsControl_allP_CD.csv",sep=""),header = T, sep=",")
  temp$level = levels[i]
  # temp <-temp %>% filter(is.na(padj) == FALSE)
  taxa_ibd = rbind(taxa_ibd,temp)
  temp_m=read.table(paste("level-",i,"_vsMF_CD_allP_OR.csv",sep=""),header = T, sep=",")
  temp_m$level = levels[i]
  taxa_OR = rbind(taxa_OR,temp_m)
}
}
names(taxa_ibd)[1] = "name"
names(taxa_OR)[1] = "name"
######Volcano plot#######
# data_f <- taxa_ibd

plot_volcano <- function(data_f, outname){

write.table(data_f, file=paste0("plot_data",outname,"_info.txt"), sep = "\t",
              quote=F, row.names=F, col.names = T)

data_f[data_f$padj>0.05,]$level = "N.S."
data_f[abs(data_f$log2FoldChange) < 1,]$level = "N.S."
# data_f[data_f$padj>0.05 & abs(data_f$log2FoldChange) < 2,]$level = "N.S."
# data_f$level = factor(data_f$level, levels = c("Order","Family","Genus", "N.S."))
data_f$level = factor(data_f$level, levels = c("Phylum","Class","Order","Family","Genus", "N.S."))

data_f = data_f %>% tidyr::separate(name, c("kingdom","phylum","class","order","family","genus"), 
                                  sep = "\\;[a-z]__", remove=F, extra = "merge", fill="warn")
# temp = data_f %>% mutate(final_name =  case_when(order != "" & level == "Order" ~ .$order,family != "" & level == "Family" ~ .$family,genus != "" & level == "Genus" ~ .$genus,
temp = data_f %>% mutate(final_name =  case_when(family != "" & level == "Family" ~ .$family,genus != "" & level == "Genus" ~ .$genus,
                                                    genus == "" & family != "" ~ paste0("U.C ",.$family), 
                                                    family == "" & order != "" ~ paste0("U.C ",.$order), 
                                                    order == "" & class != "" ~ paste0("U.C ",.$class), 
                                                    class == "" & phylum != "" ~ paste0("U.C ",.$phylum),
                                                    phylum == "" ~ paste0("U.C ",.$kingdom)))
temp[grep("\\;u__", temp$name),"final_name"] <- paste0(temp[grep("\\;u__", temp$name),"final_name"]," [2]")
temp = temp %>% arrange(level, padj)
temp$ID = 1:nrow(temp)
cols = wes_palette("Zissou1", 6, type = "continuous")
cols = c("Phylum" = cols[1], "Class" = cols[2], "Order" = cols[3], 
           "Family" = cols[4], "Genus" = cols[5],"Species" = cols[6], "N.S." = "grey")
temp$col = cols[temp$level]

p <- ggplot(temp, aes(x=log2FoldChange, y=-log10(padj), color = level)) +
    ylim(c(0,20)) + 
    geom_point(aes(x=log2FoldChange, y=-log10(padj),
                   pch = 16, cex = 2, alpha = 0.5)) +  
    scale_shape_identity() +
    theme_bw()
  p <- p + scale_color_manual(name = "level", values = cols) +
    geom_hline(yintercept=-log10(0.05), lty=2, lwd=0.5, col="darkred") +
    geom_vline(xintercept = c(-1,1), lty=2, lwd=0.5, col="darkred") +
    theme(panel.grid = element_blank()) 

  output_no_repel <- p
  
  zz <- p + geom_text_repel(data = subset(temp, padj<=0.05), aes(label = final_name),
                            size = 5, fontface = 'bold', #family = 'Times', 
                            # Add extra padding around each text label.
                            box.padding = unit(0.5, 'lines'),
                            # Add extra padding around each data point.
                            point.padding = unit(1.6, 'lines'),
                            # Color of the line segments.
                            segment.color = '#cccccc',
                            # Width of the line segments.
                            segment.size = 0.5,
                            # Draw an arrow from the label to the data point.
                            arrow = arrow(angle = 30, length = unit(0.01, 'npc'),
                                          ends = "last", type = "open"),
                            # Strength of the repulsion force.
                            force = 1,
                            # Maximum iterations of the naive repulsion algorithm O(n^2).
                            max.iter = 3e3, direction = "both") 
  output <- zz

  tt <- p + geom_text_repel(data = subset(temp, padj<=0.05 & abs(log2FoldChange) > 1), aes(label = ID),
                            size = 5, fontface = 'bold', #family = 'Times', 
                            # Add extra padding around each text label.
                            box.padding = unit(0.5, 'lines'),
                            # Add extra padding around each data point.
                            point.padding = unit(1.6, 'lines'),
                            # Color of the line segments.
                            segment.color = '#cccccc',
                            # Width of the line segments.
                            segment.size = 0.5,
                            # Draw an arrow from the label to the data point.
                            arrow = arrow(length = unit(0.01, 'npc'),
                                          ends = "last", type = "open"),
                            # Strength of the repulsion force.
                            force = 1,
                            # Maximum iterations of the naive repulsion algorithm O(n^2).
                            max.iter = 3e3, direction = "both") 
  
  output_num <- tt
  temp = temp %>% mutate(effect = case_when(log2FoldChange>=0 ~ "+",
                                            log2FoldChange<0 ~ "-")) %>% filter(level != "N.S.") %>% 
    dplyr::select(ID, final_name, level, effect, name,log2FoldChange,baseMean)
  
  save(temp, file=paste0("plot_data",outname,".Rdata"))
  write.table(temp, file=paste0("plot_data",outname,".txt"), sep = "\t",
              quote=F, row.names=F, col.names = T)

# output_no_repel + theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.x = element_blank(),axis.text.y = element_blank(),strip.background = element_blank(), strip.text = element_blank())
# output_num + theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.x = element_blank(),axis.text.y = element_blank(),strip.background = element_blank(), strip.text = element_blank())

for_plot = output_num + theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.x = element_blank(),axis.text.y = element_blank(),strip.background = element_blank(), strip.text = element_blank())
for_plot_2 = output_no_repel + theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.x = element_blank(),axis.text.y = element_blank(),strip.background = element_blank(), strip.text = element_blank())
ggsave(paste0("Volvano_plot_",outname,".png"), plot = output, dpi=500, dev='png', height=8, width=8, units="in")
ggsave(paste0("Volvano_plot_",outname,"_legend.png"), plot = output_no_repel, dpi=500, dev='png', height=8, width=8, units="in")
ggsave(paste0("Volvano_plot_",outname,"_forplot.png"), plot = for_plot_2, dpi=500, dev='png', height=8, width=8, units="in")
ggsave(paste0("Volvano_plot_",outname,"_num.png"), plot = output_num, dpi=500, dev='png', height=8, width=8, units="in")
ggsave(paste0("Volvano_plot_",outname,"_num_forplot.png"), plot = for_plot, dpi=500, dev='png', height=8, width=8, units="in")

# pdf(paste0("Volvano_plot_",outname,".pdf"), width=10, height = 10)
# grid.arrange(output)
# dev.off()
# pdf(paste0("Volvano_plot_",outname,"_legend.pdf"),  width=10, height = 10)
# grid.arrange(output_no_repel)
# dev.off()
# pdf(paste0("Volvano_plot_",outname,"_num.pdf"),  width=10, height = 10)
# grid.arrange(output_num)
# dev.off()
}

plot_volcano(taxa_ibd,paste0("vsControl_",Phenotype))
plot_volcano(taxa_OR,paste0("vsMF_MD_OR_",Phenotype))

#########################

taxa_ibd <- taxa_ibd %>% mutate(u_CI = log2FoldChange + 1.96*lfcSE,l_CI = log2FoldChange - 1.96*lfcSE)
taxa_OR <- taxa_OR %>% mutate(u_CI = log2FoldChange + 1.96*lfcSE,l_CI = log2FoldChange - 1.96*lfcSE)

temp_ibd <- taxa_ibd
temp_OR <- taxa_OR
temp_ibd <- temp_ibd %>% rename(IBD_fc=log2FoldChange, ibd_p=pvalue,ibd_padj=padj,IBD_u_CI=u_CI,IBD_l_CI=l_CI,IBD_Z=stat)
ibd <- temp_ibd[,c("name","IBD_fc","IBD_u_CI","IBD_l_CI","ibd_p","ibd_padj","level","IBD_Z")]
temp_OR <- temp_OR %>% rename(OR_fc=log2FoldChange, OR_p=pvalue,OR_padj=padj,OR_u_CI=u_CI,OR_l_CI=l_CI,OR_Z=stat)
OR <- temp_OR[,c("name","OR_fc","OR_u_CI","OR_l_CI","OR_p","OR_padj","level","OR_Z")]
ibd_OR <- full_join(ibd,OR,by=c("name","level")) 

write.table(ibd_OR, file=paste0("IBD_OR_taxa_metadata_",Phenotype,".txt"), sep = "\t", quote=F, row.names=F, col.names = T)

ibd_OR<-ibd_OR %>% mutate(IBD_status = case_when(ibd_padj < 0.05 ~ "IBD_sig",ibd_padj >= 0.05 ~ "IBD_insig"),OR_status = case_when(OR_padj < 0.05 ~ "OR_sig",OR_padj >= 0.05 ~ "OR_insig"))

i_o_t <- ibd_OR[,c("IBD_status","OR_status")] %>% table %>% as.data.frame()
g_i_o <- ibd_OR %>% filter(level == "Genus") %>% .[,c("IBD_status","OR_status")] %>% table %>% as.data.frame()
f_i_o <- ibd_OR %>% filter(level == "Family") %>% .[,c("IBD_status","OR_status")] %>% table %>% as.data.frame()
o_i_o <- ibd_OR %>% filter(level == "Order") %>% .[,c("IBD_status","OR_status")] %>% table %>% as.data.frame()

data_f = ibd_OR %>% tidyr::separate(name, c("kingdom","phylum","class","order","family","genus"), 
                                  sep = "\\;[a-z]__", remove=F, extra = "merge", fill="warn")
temp = data_f %>% mutate(final_name =  case_when(phylum != "" & level == "Phylum" ~ .$phylum,class != "" & level == "Class" ~ .$class,order != "" & level == "Order" ~ .$order,family != "" & level == "Family" ~ .$family,genus != "" & level == "Genus" ~ .$genus,
                                                    genus == "" & family != "" ~ paste0("U.C ",.$family), 
                                                    family == "" & order != "" ~ paste0("U.C ",.$order), 
                                                    order == "" & class != "" ~ paste0("U.C ",.$class), 
                                                    class == "" & phylum != "" ~ paste0("U.C ",.$phylum),
                                                    phylum == "" ~ paste0("U.C ",.$kingdom)))
temp[grep("\\;u__", temp$name),"final_name"] <- paste0(temp[grep("\\;u__", temp$name),"final_name"]," [2]")
ibd_OR <- temp[,c(1,8:ncol(temp))]

ge_or <- ibd_OR %>% filter(level == "Genus")
fa_or <- ibd_OR %>% filter(level == "Family")
od_or <- ibd_OR %>% filter(level == "Order")

IBD_OR_sig_ge <- ge_or %>% filter(ibd_padj < 0.05 | OR_padj < 0.05) %>% mutate(Sig = case_when(IBD_status == "IBD_sig" & OR_status == "OR_sig" ~ "Both", IBD_status == "IBD_sig" & OR_status != "OR_sig" ~ "IBD", IBD_status != "IBD_sig" & OR_status == "OR_sig" ~ "OR"))
IBD_OR_sig_ge$ID = 1:nrow(IBD_OR_sig_ge)
IBD_OR_sig_ge <- IBD_OR_sig_ge %>% mutate(ID_N = paste(ID,final_name,sep="_"))
IBD_OR_sig_ge <- IBD_OR_sig_ge[,c(1:6,9:13,18:20)]

IBD_OR_sig_fa <- fa_or %>% filter(ibd_padj < 0.05 | OR_padj < 0.05) %>% mutate(Sig = case_when(IBD_status == "IBD_sig" & OR_status == "OR_sig" ~ "Both", IBD_status == "IBD_sig" & OR_status != "OR_sig" ~ "IBD", IBD_status != "IBD_sig" & OR_status == "OR_sig" ~ "OR"))
IBD_OR_sig_fa$ID = 1:nrow(IBD_OR_sig_fa)
IBD_OR_sig_fa <- IBD_OR_sig_fa %>% mutate(ID_N = paste(ID,final_name,sep="_"))
IBD_OR_sig_fa <- IBD_OR_sig_fa[,c(1:6,9:13,18:20)]

IBD_OR_sig_or <- od_or %>% filter(ibd_padj < 0.05 | OR_padj < 0.05) %>% mutate(Sig = case_when(IBD_status == "IBD_sig" & OR_status == "OR_sig" ~ "Both", IBD_status == "IBD_sig" & OR_status != "OR_sig" ~ "IBD", IBD_status != "IBD_sig" & OR_status == "OR_sig" ~ "OR"))
IBD_OR_sig_or$ID = 1:nrow(IBD_OR_sig_or)
IBD_OR_sig_or <- IBD_OR_sig_or %>% mutate(ID_N = paste(ID,final_name,sep="_"))
IBD_OR_sig_or <- IBD_OR_sig_or[,c(1:6,9:13,18:20)]

plot_lfc <- function(x,y){

m <- lm(x[,7]~x[,2],x)
capture.output(summary(m), file = paste0("lfc_lm_",y,".txt")) 

options(ggrepel.max.overlaps = Inf)
ggplot(x, aes(x = x[,2], y = x[,7])) + geom_point(aes(color= Sig,pch = 16, cex = 2, alpha = 0.5)) + scale_shape_identity() +
stat_smooth(method = 'lm', se=F, color='black',size = 0.5) +
labs(x="IBD lfc",y="mental disorder lfc") +
geom_hline(yintercept=0, lty=2, lwd=0.5, alpha=0.5, col="darkred") + 
geom_vline(xintercept = 0, lty=2, lwd=0.5, alpha=0.5,col="darkred") +
scale_x_continuous(breaks=seq(-5, 5, 1)) + 
scale_y_continuous(breaks=seq(-5, 5, 1)) +
geom_errorbar(aes(ymin=x[,9], ymax=x[,8]), colour="#050142", width=.04, alpha = 0.2) +
geom_errorbar(aes(xmin=x[,4], xmax=x[,3]), colour="#470000", width=.04,alpha = 0.2) +
geom_text_repel(aes(label = ID), size = 2.5, box.padding = unit(0.3, 'lines'),point.padding = unit(1., 'lines'),
                              segment.color = '#cccccc',
                              segment.size = 0.5,
                              arrow = arrow(angle = 30, length = unit(0.01, 'npc'),
                                          ends = "last", type = "open"),
                              force = 1,hjust=1) + theme_bw()

ggsave(paste0("lfc_sig_num_",y,".png"), dpi=300, dev='png', height=10, width=10, units="in")

temp <- x
temp[which(temp$Sig != "Both"),"IBD_u_CI"] <- NA
temp[which(temp$Sig != "Both"),"IBD_l_CI"] <- NA
temp[which(temp$Sig != "Both"),"OR_u_CI"] <- NA
temp[which(temp$Sig != "Both"),"OR_l_CI"] <- NA
temp[which(temp$Sig != "Both"),"ID"] <- NA


cols = wes_palette("GrandBudapest1")
col = c("Both" = cols[2], "IBD" = "grey", "OR" = "grey")
x$col = col[x$Sig]

p <- ggplot(x, aes(x=IBD_fc, y=OR_fc)) + geom_point(aes(color= Sig,pch = 16, cex = 2, alpha = 0.5),size = 7) + scale_shape_identity() + theme_bw()


for_plot_p <- p + scale_color_manual(name = "Sig", values = col) +
  geom_hline(yintercept=0, lty=2, lwd=0.5, alpha=0.5, col="darkred") + 
  geom_vline(xintercept = 0, lty=2, lwd=0.5, alpha=0.5,col="darkred") +
  geom_errorbar(data = temp, aes(ymin=OR_l_CI, ymax=OR_u_CI), colour="#050142", width=0.3, alpha = 0.3,size = 1) +
  geom_errorbar(data = temp, aes(xmin=IBD_l_CI, xmax=IBD_u_CI), colour="#470000", width=0.3,alpha = 0.3,size = 1) + theme_test() + theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.x = element_blank(),axis.text.y = element_blank(), panel.grid.major.x = element_blank())

ggsave(paste0("lfc_sig_no_lebel_",y,"_both_for_plotting.png"), plot = for_plot_p, dpi=500, dev='png', height=8, width=8, units="in")

No_p <- p + scale_color_manual(name = "Sig", values = col) +
  geom_hline(yintercept=0, lty=2, lwd=0.5, alpha=0.5, col="darkred") + 
  geom_vline(xintercept = 0, lty=2, lwd=0.5, alpha=0.5,col="darkred") +
  geom_errorbar(data = temp, aes(ymin=OR_l_CI, ymax=OR_u_CI), colour="#050142", width=.04, alpha = 0.2) +
  geom_errorbar(data = temp, aes(xmin=IBD_l_CI, xmax=IBD_u_CI), colour="#470000", width=.04,alpha = 0.2) + theme_test() + theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank())

ggsave(paste0("lfc_sig_no_lebel_",y,"_both.png"), plot = No_p, dpi=500, dev='png', height=8, width=8, units="in")

ID_p <- p + scale_color_manual(name = "Sig", values = col) +
  geom_hline(yintercept=0, lty=2, lwd=0.5, alpha=0.5, col="darkred") + 
  geom_vline(xintercept = 0, lty=2, lwd=0.5, alpha=0.5,col="darkred") +
  geom_errorbar(data = temp, aes(ymin=OR_l_CI, ymax=OR_u_CI), colour="#050142", width=.04, alpha = 0.2) +
  geom_errorbar(data = temp, aes(xmin=IBD_l_CI, xmax=IBD_u_CI), colour="#470000", width=.04,alpha = 0.2) +
  geom_text_repel(data = subset(x, Sig == "Both"), aes(label = ID), size = 3, fontface = 'bold', box.padding = unit(0.5, 'lines'),point.padding = unit(1.6, 'lines'),
                              segment.color = '#cccccc',
                              segment.size = 0.5,
                              arrow = arrow(angle = 30, length = unit(0.01, 'npc'),
                                          ends = "last", type = "open"),
                              force = 1)


ggsave(paste0("lfc_sig_num_",y,"_both.png"), plot = ID_p, dpi=300, dev='png', height=10, width=10, units="in")

Name_p <- p + scale_color_manual(name = "Sig", values = col) +
  geom_hline(yintercept=0, lty=2, lwd=0.5, alpha=0.5, col="darkred") + 
  geom_vline(xintercept = 0, lty=2, lwd=0.5, alpha=0.5,col="darkred") +
  geom_errorbar(data = temp, aes(ymin=OR_l_CI, ymax=OR_u_CI), colour="#050142", width=.04, alpha = 0.2) +
  geom_errorbar(data = temp, aes(xmin=IBD_l_CI, xmax=IBD_u_CI), colour="#470000", width=.04,alpha = 0.2) +
  geom_text_repel(data = subset(x, Sig == "Both"), aes(label = ID_N), size = 3, fontface = 'bold', box.padding = unit(0.7, 'lines'),point.padding = unit(1.6, 'lines'),
                              segment.color = '#cccccc',
                              segment.size = 0.5,
                              arrow = arrow(angle = 30, length = unit(0.01, 'npc'),
                                          ends = "last", type = "open"),
                              force = 1, hjust = 1)

ggsave(paste0("lfc_sig_name_",y,"_both.png"), plot = Name_p, dpi=300, dev='png', height=10, width=10, units="in")

ggplot(x, aes(x = x[,2], y = x[,7], fill = x[,"ID_N"])) + geom_point(size = 3) + 
geom_hline(yintercept=0, lty=2, lwd=0.5, alpha=0.5, col="darkred") + 
geom_vline(xintercept = 0, lty=2, lwd=0.5, alpha=0.5,col="darkred") +
scale_x_continuous(breaks=seq(-5, 5, 1)) + 
scale_y_continuous(breaks=seq(-5, 5, 1)) +
geom_text_repel(aes(label=x[,"ID"]), alpha=1, vjust = 2, segment.size = 0.2,color="black") +
theme_bw()

ggsave(paste0("lfc_sig_legend_",y,".png"), dpi=300, dev='png', height=10, width=40, units="in")

}

plot_lfc(IBD_OR_sig_ge,paste0(Phenotype,"_OR_ge"))
plot_lfc(IBD_OR_sig_fa,paste0(Phenotype,"_OR_fa"))
plot_lfc(IBD_OR_sig_or,paste0(Phenotype,"_OR_or"))

